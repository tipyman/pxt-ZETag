<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="mg%MRd3nQBTfQ;mIYQN/" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="Yr!h{5K,o^.wsoESQc^k" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let Counter2 = 0" numlines="1" declaredvars="Counter2"></mutation><next><block type="typescript_statement" id="9.p*i%[f/4PTainGkkYQ" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let Base_frequency = 0" numlines="1" declaredvars="Base_frequency"></mutation><next><block type="typescript_statement" id="@_NQ-E0!v(9OkiGJ?~Hk" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let ch_num = 0" numlines="1" declaredvars="ch_num"></mutation><next><block type="typescript_statement" id="b$YDmbl:Ke:40k}tM+Wu" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let TX_Power_data = 0" numlines="1" declaredvars="TX_Power_data"></mutation><next><block type="typescript_statement" id="%vM8YXprbMXWE?=T@nJ?" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let o = 0" numlines="1" declaredvars="o"></mutation><next><block type="typescript_statement" id="rfm:w0+(rVqdsx?r|UtK" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let CheckSum = 0" numlines="1" declaredvars="CheckSum"></mutation><next><block type="typescript_statement" id="pSnh!.4C`NG.R?=3Y}d." editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let ch_spacing = 0" numlines="1" declaredvars="ch_spacing"></mutation><next><block type="typescript_statement" id="Nk42Nf9PVAX7`Y#a_Z}n" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let Para_array: number[] = []" numlines="1" declaredvars="Para_array"></mutation><next><block type="typescript_statement" id="_}.2rHnb`Nz?FM*4C#YE" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace ZETag {" line1="    //% blockId=Channel_Spacing block=&quot;ZETag Set Channel Space %text&quot;" line2="    //% CH_Space.min=100 CH_Space.max=200 CH_Space.defl=100" line3="    export function Set_channel_spacing(CH_space: number) {" line4="        if (CH_space &gt; 200) {" line5="            ch_spacing = 200" line6="        } else {" line7="            ch_spacing = CH_space" line8="        }" line9="        // FF 00 03 F0 64 56; 100KHz設定" line10="        // FF+00+03+F0=1F2=498(10)" line11="        Send_Uart_data([" line12="            255," line13="            0," line14="            3," line15="            240," line16="            ch_spacing," line17="            (498 + ch_spacing) % 256" line18="        ], 6)" line19="    }" line20="" line21="    //% blockId=Send_data block=&quot;ZETag Send data %text %text&quot;" line22="    export function Send_data(list: number[], e_num: number) {" line23="        // 255+2+128=385" line24="        // FF 00 02 80" line25="        CheckSum = 385 + e_num" line26="        Send_Uart_data([" line27="            255," line28="            0," line29="            e_num + 2," line30="            128" line31="        ], 4)" line32="        o = 0" line33="        for (let index = 0; index &lt; e_num; index++) {" line34="            bserial.binserial_write(list[o])" line35="            basic.pause(5)" line36="            CheckSum = CheckSum + list[o]" line37="            o += 1" line38="        }" line39="        bserial.binserial_write(CheckSum % 256)" line40="        basic.pause(5)" line41="    }" line42="" line43="    //% blockId=TX_Power block=&quot;ZETag TX Power %text&quot;" line44="    export function Set_TX_Power(TX_Power: number) {" line45="        if (TX_Power &gt; 10) {" line46="            TX_Power_data = 20" line47="        } else {" line48="            TX_Power_data = TX_Power * 2" line49="        }" line50="        // FF 00 03 41 10 53; 出力8dB設定" line51="        // FF+00+03+41=143=323(10)" line52="        Send_Uart_data([" line53="            255," line54="            0," line55="            3," line56="            65," line57="            TX_Power_data," line58="            (323 + TX_Power_data) % 256" line59="        ], 6)" line60="    }" line61="" line62="    export function Send_Uart_data(list: number[], e_num: number) {" line63="        o = 0" line64="        for (let n = 0; n &lt;= e_num - 1; n++) {" line65="            bserial.binserial_write(list[n])" line66="            basic.pause(5)" line67="        }" line68="    }" line69="" line70="    //% blockId=Set_Frequency block=&quot;ZETag Set Frequency %text %text %text&quot;" line71="    export function Set_Frequency(Frequency: number, CH_num: number, step: number) {" line72="        if (step == 0) {" line73="            o = 1" line74="        } else if (step &gt;= 2) {" line75="            o = 2" line76="        } else {" line77="            o = step" line78="        }" line79="        if (CH_num &lt;= 1) {" line80="            ch_num = -1" line81="        } else if (CH_num &gt; 6) {" line82="            ch_num = 6" line83="        } else {" line84="            ch_num = CH_num" line85="        }" line86="        Base_frequency = Frequency" line87="        CheckSum = 0" line88="        Para_array = [" line89="            255," line90="            0," line91="            8 + ch_num," line92="            64," line93="            1," line94="            Math.idiv(Base_frequency, 16777216)," line95="            Math.idiv(Base_frequency, 65536) % 256," line96="            Math.idiv(Base_frequency, 256) % 256," line97="            Base_frequency % 256," line98="            ch_num," line99="            0," line100="            0," line101="            0," line102="            0," line103="            0," line104="            0," line105="            0" line106="        ]" line107="        if (ch_num &gt;= 2) {" line108="            for (let Counter = 0; Counter &lt;= ch_num - 1; Counter++) {" line109="                Para_array[10 + Counter] = Counter * o" line110="            }" line111="        } else {" line112="            Para_array[4] = 0" line113="        }" line114="        Counter2 = 0" line115="        for (let index2 = 0; index2 &lt; ch_num + 10; index2++) {" line116="            CheckSum = CheckSum + Para_array[Counter2]" line117="            Counter2 += 1" line118="        }" line119="        CheckSum = CheckSum % 256" line120="        Para_array[10 + ch_num] = CheckSum" line121="        Send_Uart_data(Para_array, 11 + ch_num)" line122="    }" line123="}" numlines="124"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>