<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="_?`2oEJhHM9Z,qOgIWD]" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="cCA8+AK%#Itwrg2xb=JR" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace ZETag {" line1="    let Para_array: number[] = []" line2="    let ch_spacing = 0" line3="    let CheckSum = 0" line4="    let o = 0" line5="    let TX_Power_data = 0" line6="    let ch_num = 0" line7="    let Base_frequency = 0" line8="    let Counter2 = 0" line9="" line10="    function Send_Uart_data(data_array: number[], num: number):void {" line11="        o = 0" line12="        for (let n = 0; n &lt;= num - 1; n++) {" line13="            binserial_write(data_array[n])" line14="            basic.pause(5)" line15="        }" line16="    }" line17="" line18="    function binserial_write(text: number): void {" line19="            return;" line20="    }" line21="" line22="/**" line23=" * set channel spacing" line24=" */" line25="    //% blockId=Channel_Spacing block=&quot;Set Channel Space %s (KHz)&quot;" line26="    //% weight=80 blockGap=8" line27="    //% CH_SPACE.min=100 CH_SPACE.max=200 CH_SPACE.defl=100" line28="    export function Set_channel_spacing(CH_SPACE: number) {" line29="        // FF 00 03 F0 64 56; 100KHz設定" line30="        // FF+00+03+F0=1F2 -&gt; 0xf2" line31="        Send_Uart_data([" line32="            0xff," line33="            0x00," line34="            0x03," line35="            0xf0," line36="            CH_SPACE," line37="            (0xf2 + ch_spacing) % 256" line38="        ], 6)" line39="        basic.pause(100)" line40="    }" line41="" line42="    //% blockId=Send_data block=&quot;Send ZETag data %data_array %num&quot;" line43="    //% weight=80 blockGap=8" line44="    export function Send_data(data_array: number[], num: number) {" line45="        // 0xff+2+0x80=0x181 -&gt; 0x81" line46="        // FF 00 02 80" line47="        CheckSum = 0x81 + num" line48="        Send_Uart_data([" line49="            0xff," line50="            0x00," line51="            num + 2," line52="            0x80" line53="        ], 4)" line54="        o = 0" line55="        for (let index = 0; index &lt; num; index++) {" line56="            binserial_write(data_array[o])" line57="            basic.pause(5)" line58="            CheckSum = CheckSum + data_array[o]" line59="            o += 1" line60="        }" line61="        binserial_write(CheckSum % 256)" line62="        basic.pause(100)" line63="    }" line64="" line65="    //% blockId=TX_Power block=&quot;TX Power %TX_Power (dB)&quot;" line66="    //% weight=80 blockGap=8" line67="    //% TX_Power.min=1 TX_Power.max=10 TX_Power.defl=10" line68="    export function Set_TX_Power(TX_Power: number) {" line69="        TX_Power_data = TX_Power * 2" line70="        // FF 00 03 41 10 53; 出力8dB設定" line71="        // FF+00+03+41=0x143 -&gt; 0x43" line72="        Send_Uart_data([" line73="            0xff," line74="            0x00," line75="            0x03," line76="            0x41," line77="            TX_Power_data," line78="            (0x43 + TX_Power_data) % 256" line79="        ], 6)" line80="        basic.pause(100)" line81="    }" line82="" line83="    //% blockId=Set_Frequency block=&quot;Set Frequency %Frequency (Hz) %CH_num (ch) %CH_step&quot;" line84="    //% weight=80 blockGap=8" line85="    //% CH_num.min=1 CH_num.max=6 CH_num.defl=2" line86="    //% CH_step.min=1 CH_step.max=2 CH_step.defl=2" line87="    export function Set_Frequency(Frequency: number, CH_num: number, CH_step: number) {" line88="        o = CH_step" line89="        if (CH_num &lt;= 1) {" line90="            ch_num = -1" line91="        } else {" line92="            ch_num = CH_num" line93="        }" line94="        Base_frequency = Frequency" line95="        CheckSum = 0" line96="        Para_array = [" line97="            0xff," line98="            0x00," line99="            0x08 + ch_num," line100="            0x40," line101="            0x01," line102="            Math.idiv(Base_frequency, 16777216)," line103="            Math.idiv(Base_frequency, 65536) % 256," line104="            Math.idiv(Base_frequency, 256) % 256," line105="            Base_frequency % 256," line106="            ch_num," line107="            0," line108="            0," line109="            0," line110="            0," line111="            0," line112="            0," line113="            0" line114="        ]" line115="        if (ch_num &gt;= 2) {" line116="            for (let Counter = 0; Counter &lt;= ch_num - 1; Counter++) {" line117="                Para_array[10 + Counter] = Counter * o" line118="            }" line119="        } else {" line120="            Para_array[4] = 0" line121="        }" line122="        Counter2 = 0" line123="        for (let index2 = 0; index2 &lt; ch_num + 10; index2++) {" line124="            CheckSum = CheckSum + Para_array[Counter2]" line125="            Counter2 += 1" line126="        }" line127="        CheckSum = CheckSum % 256" line128="        Para_array[10 + ch_num] = CheckSum" line129="        Send_Uart_data(Para_array, 11 + ch_num)" line130="        basic.pause(100)" line131="    }" line132="}" numlines="133"></mutation></block></statement></block></xml>