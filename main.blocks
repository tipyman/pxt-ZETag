<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="/K^(eaKTKw^!CDmH3Qk2" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="+,E%8p`^pRfA^^CGfQoI" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let Counter2 = 0" numlines="1" declaredvars="Counter2"></mutation><next><block type="typescript_statement" id="wIyb(v=b4!r6*0v!uE{D" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let Base_frequency = 0" numlines="1" declaredvars="Base_frequency"></mutation><next><block type="typescript_statement" id="d5A=^|~Hwax0zKqIYJ*=" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let ch_num = 0" numlines="1" declaredvars="ch_num"></mutation><next><block type="typescript_statement" id="1;pzB8Nvt_`TdcSoLs]u" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let TX_Power_data = 0" numlines="1" declaredvars="TX_Power_data"></mutation><next><block type="typescript_statement" id="z=R5/4mS}qxXOz=eBJ~I" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let o = 0" numlines="1" declaredvars="o"></mutation><next><block type="typescript_statement" id="]?)lG/1cw[y4FK*^F%RK" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let CheckSum = 0" numlines="1" declaredvars="CheckSum"></mutation><next><block type="typescript_statement" id="f@_+|j=w1g|BM}oVeFiZ" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let ch_spacing = 0" numlines="1" declaredvars="ch_spacing"></mutation><next><block type="typescript_statement" id="Y?U6s?:kr:xJfV=,nlY)" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let Para_array: number[] = []" numlines="1" declaredvars="Para_array"></mutation><next><block type="typescript_statement" id="/ypD;I}s@byH,65y?IF!" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace ZETag {" line1="    //% blockId=Channel_Spacing block=&quot;ZETag Set Channel Space %text&quot;" line2="    export function Set_channel_spacing(CH_space: number) {" line3="        if (CH_space &gt; 200) {" line4="            ch_spacing = 200" line5="        } else {" line6="            ch_spacing = CH_space" line7="        }" line8="        // FF 00 03 F0 64 56; 100KHz設定" line9="        // FF+00+03+F0=1F2=498(10)" line10="        Send_Uart_data([" line11="            255," line12="            0," line13="            3," line14="            240," line15="            ch_spacing," line16="            (498 + ch_spacing) % 256" line17="        ], 6)" line18="    }" line19="" line20="    //% blockId=Send_data block=&quot;ZETag Send data %text %text&quot;" line21="    export function Send_data(list: number[], e_num: number) {" line22="        // 255+2+128=385" line23="        // FF 00 02 80" line24="        CheckSum = 385 + e_num" line25="        Send_Uart_data([" line26="            255," line27="            0," line28="            e_num + 2," line29="            128" line30="        ], 4)" line31="        o = 0" line32="        for (let index = 0; index &lt; e_num; index++) {" line33="            bserial.binserial_write(list[o])" line34="            basic.pause(5)" line35="            CheckSum = CheckSum + list[o]" line36="            o += 1" line37="        }" line38="        bserial.binserial_write(CheckSum % 256)" line39="        basic.pause(5)" line40="    }" line41="" line42="    //% blockId=TX_Power block=&quot;ZETag TX Power %text&quot;" line43="    export function Set_TX_Power(TX_Power: number) {" line44="        if (TX_Power &gt; 10) {" line45="            TX_Power_data = 20" line46="        } else {" line47="            TX_Power_data = TX_Power * 2" line48="        }" line49="        // FF 00 03 41 10 53; 出力8dB設定" line50="        // FF+00+03+41=143=323(10)" line51="        Send_Uart_data([" line52="            255," line53="            0," line54="            3," line55="            65," line56="            TX_Power_data," line57="            (323 + TX_Power_data) % 256" line58="        ], 6)" line59="    }" line60="" line61="    export function Send_Uart_data(list: number[], e_num: number) {" line62="        o = 0" line63="        for (let n = 0; n &lt;= e_num - 1; n++) {" line64="            bserial.binserial_write(list[n])" line65="            basic.pause(5)" line66="        }" line67="    }" line68="" line69="    //% blockId=Set_Frequency block=&quot;ZETag Set Frequency %text %text %text&quot;" line70="    export function Set_Frequency(Frequency: number, CH_num: number, step: number) {" line71="        if (step == 0) {" line72="            o = 1" line73="        } else if (step &gt;= 2) {" line74="            o = 2" line75="        } else {" line76="            o = step" line77="        }" line78="        if (CH_num &lt;= 1) {" line79="            ch_num = -1" line80="        } else if (CH_num &gt; 6) {" line81="            ch_num = 6" line82="        } else {" line83="            ch_num = CH_num" line84="        }" line85="        Base_frequency = Frequency" line86="        CheckSum = 0" line87="        Para_array = [" line88="            255," line89="            0," line90="            8 + ch_num," line91="            64," line92="            1," line93="            Math.idiv(Base_frequency, 16777216)," line94="            Math.idiv(Base_frequency, 65536) % 256," line95="            Math.idiv(Base_frequency, 256) % 256," line96="            Base_frequency % 256," line97="            ch_num," line98="            0," line99="            0," line100="            0," line101="            0," line102="            0," line103="            0," line104="            0" line105="        ]" line106="        if (ch_num &gt;= 2) {" line107="            for (let Counter = 0; Counter &lt;= ch_num - 1; Counter++) {" line108="                Para_array[10 + Counter] = Counter * o" line109="            }" line110="        } else {" line111="            Para_array[4] = 0" line112="        }" line113="        Counter2 = 0" line114="        for (let index2 = 0; index2 &lt; ch_num + 10; index2++) {" line115="            CheckSum = CheckSum + Para_array[Counter2]" line116="            Counter2 += 1" line117="        }" line118="        CheckSum = CheckSum % 256" line119="        Para_array[10 + ch_num] = CheckSum" line120="        Send_Uart_data(Para_array, 11 + ch_num)" line121="    }" line122="}" numlines="123"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>